version: '3.8'

services:
  postgres:
    container_name: PostgreSQL
    image: bitnami/postgresql:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - APP_DB_USER=postgres
      - APP_DB_PASS=postgres
      - APP_DB_NAME=postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    volumes:
#      - ./db:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data/

    ports:
      - 5432:5432


  pgadmin:
    container_name: PGAdmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: getter@getter.com.br
      PGADMIN_DEFAULT_PASSWORD: getter@2022
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    restart: unless-stopped

  web:
    container_name: Django
    environment:
      - SECRET_KEY=t6g8a4oga114*9-v1p7y!cac)(j3mby(v@a63h=py_^u+wf9yb
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - ALLOWED_HOSTS=*
      - DEBUG=True
    build:
      context: .
      dockerfile: Dockerfile

#    command: sh -c "python manage.py makemigrations && python manage.py migrate"
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
#    command: sh -c "python manage.py makemigrations && python manage.py migrate &&  gunicorn --worker-class=gevent --workers=3 --worker-connections=1000 config.wsgi:application --bind=0.0.0.0:8000 --log-level=DEBUG"
    expose:
      - 8000
    ports:
      - 8000:8000
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    depends_on:
      - postgres

  grafana:
    container_name: Grafana
    build: ./.docker/grafana
    hostname: grafana
    user: root
    volumes:
      - grafanadata:/var/lib/grafana
    environment:
      GF_SERVER_ROOT_URL: http://grafana:3000
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_DEFAULT_THEME: dark

    links:
      - postgres
    ports:
      - 3000:3000
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-s", "-f", "http://grafana:3000/login" ]
      retries: 6

  redis:
    container_name: Redis
    image: redis:alpine
    expose:
      - 6379
    ports:
      - 6379:6379

  flower:
    container_name: Flower
    build:
      context: .
    command: ["flower -A config --port=5555"]
    expose:
      - 5555
    ports:
      - 5555:5555
    volumes:
      - ./home/appuser:/home/appuser
    environment:
      - DB_HOST=postgres
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASS=postgres
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - SECRET_KEY=t6g8a4oga114*9-v1p7y!cac)(j3mby(v@a63h=py_^u+wf9yb
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - ALLOWED_HOSTS=*
      - DEBUG=True
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0


  celery:
    container_name: Worker
    restart: always
    build:
      context: .
    volumes:
      - ./home/appuser:/home/appuser
    command: ["celery -A core worker -l DEBUG"]
#    command: [ "celery" ,"-A" ,"config", "worker", "-B" ,"-l" ,"DEBUG" ]
    environment:
      - DB_HOST=postgres
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASS=postgres
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - SECRET_KEY=t6g8a4oga114*9-v1p7y!cac)(j3mby(v@a63h=py_^u+wf9yb
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - ALLOWED_HOSTS=*
      - DEBUG=True

    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M

    depends_on:
      - postgres
      - redis
      - web


volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  pgadmin:
  esdata:
    driver: local
  grafanadata:
    driver: local

